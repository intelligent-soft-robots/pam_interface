#!/usr/bin/env python3

import sys
import time
import pam_interface

SEGMENT_ID = "pam_robot"


def set_pressures_to_minimum(robot, config):
    """Sets desired pressures to minimum as specified
    in the corresponding configuration file.

    Args:
        robot: robot specified in pam interface
        config: configuration specified in pam interface
    """

    def _ended(agos, antagos, min_pressure_agos, min_pressure_antagos):
        if not all([a <= ma for a, ma in zip(agos, min_pressure_agos)]):
            return False
        if not all([a <= ma for a, ma in zip(antagos, min_pressure_antagos)]):
            return False
        return True

    def _clip(value):
        return max(0, value)

    robot_state = robot.data_out()
    pressure_agos = [
        _clip(robot_state.get_desired(dof, pam_interface.sign.agonist))
        for dof in range(4)
    ]
    pressure_antagos = [
        _clip(robot_state.get_desired(dof, pam_interface.sign.antagonist))
        for dof in range(4)
    ]

    min_pressure_agos = [
        config.min_pressure(dof, pam_interface.sign.agonist) for dof in range(4)
    ]
    min_pressure_antagos = [
        config.min_pressure(dof, pam_interface.sign.antagonist) for dof in range(4)
    ]

    action = pam_interface.PressureAction()

    try:
        while not _ended(
            pressure_agos, pressure_antagos, min_pressure_agos, min_pressure_antagos
        ):
            for dof in range(4):
                if pressure_agos[dof] > min_pressure_agos[dof]:
                    pressure_agos[dof] -= 1
                    action.set(dof, pam_interface.sign.agonist, pressure_agos[dof])
                if pressure_antagos[dof] > min_pressure_antagos[dof]:
                    pressure_antagos[dof] -= 1
                    action.set(
                        dof, pam_interface.sign.antagonist, pressure_antagos[dof]
                    )
            robot.pressure_in(action)
            robot_state = robot.data_out()
            display(robot_state)
            time.sleep(0.0005)  # ~2000Hz
    except KeyboardInterrupt:
        # if the user exited by ctr+c several times
        set_pressures_to_minimum(robot, config)


def run(segment_id):
    """Runs the control loop for iteratively setting pressure to minimum.

    Args:
        segment_id (string): segment ID specifier
    """

    # default config
    configuration = pam_interface.DefaultConfiguration()

    # interface to the robot
    robot = pam_interface.RealRobot(configuration)

    # clearing the shared memory
    pam_interface.init(segment_id)

    # setting pressures to minimum
    set_pressures_to_minimum(robot, configuration)

    # this triggers also closing of fpga
    del robot


if __name__ == "__main__":
    run(SEGMENT_ID)
